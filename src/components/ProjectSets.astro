---
import { loadQuery } from '../sanity/lib/loadQuery'
import Project from './Project.svelte'
import { marked } from 'marked'
import getDimsFromImageUrls from '../scripts/getDimsFromImageUrls.js'

const { projectSets } = Astro.props

const { data: projectsUngrouped } = await loadQuery({
  query: `*[_type=="project"] | order(orderRank asc) [] {
    ...,
    featuredStill {..., asset->},
    stills[] {..., asset->},
  }`,
})

// Set max width for stills, to be used to calculate max heights
const maxStillWidth = 1980

const getTransformedProject = async (project) => {
  // Change hypens to em dashes, then process with Markdown to smarten punctuation
  const markdownTitle = marked.parseInline(
    project.title.replace(/ - /g, ` â€” `),
    { smartypants: true }
  )

  // Update project data with still dimensions
  return await getProjectWithImageDimsData({ ...project, title: markdownTitle })
}

const getProjectWithImageDimsData = async (project) => {
  // Get stills URLs
  const urls = project.stills.map((still) => still.asset.url)

  // Add featured still URL (probably always an image from the standard stills,
  // but include it here separately in case it's not)
  urls.push(project.featuredStill.asset.url)

  // Get dims and aspect ratio for all images
  const stillsDimsSansMaxDims = await getDimsFromImageUrls(urls)
  const stillsDimsWithMaxDims = stillsDimsSansMaxDims.map(
    ({ width, height, aspect }) => {
      return {
        width,
        height,
        aspect,
        maxWidth: maxStillWidth,
        maxHeight: Math.round(maxStillWidth / aspect),
      }
    }
  )

  return {
    ...project,
    stillsDims: stillsDimsWithMaxDims.slice(0, -1), // remove featured still
    featuredStillDims: stillsDimsSansMaxDims.slice(-1)[0],
  }
}
---

{
  projectSets.map((projectSet, i) => (
    <section
      class="section"
      id={i === 0 ? 'first-section' : ''}
    >
      <h3>{projectSet.heading}</h3>

      {projectsUngrouped
        .filter((project) => project.projectSet._ref === projectSet._id)
        .map(async (project) => (
          <Project
            project={await getTransformedProject(project)}
            projectTypeLabel={
              project.projectType || projectSet.fallbackProjectTypeLabel
            }
            client:load
          />
        ))}
    </section>
  ))
}
