---
/**
 * Based heavily on the Modal component from Mark Teekman's
 * [`accessible-astro-components`][1]
 *
 * [1]: https://www.npmjs.com/package/accessible-astro-components#Modal
 */

const { autoplayVimeoPlayer, closeText = 'Close', triggerId } = Astro.props
---

<div
  class="modal"
  role="dialog"
  aria-labelledby={triggerId}
  aria-hidden="true"
  data-autoplay-vimeo-player={autoplayVimeoPlayer}
>
  <div class="modal__inner">
    <div class="modal__close">
      <button
        aria-label={closeText}
        class="modal__close__button"
      >
        <img
          src="/img/close-button.svg"
          width="36"
          height="36"
          alt=""
          title="Press Esc to close"
        />
      </button>
    </div>

    <div class="modal__content">
      <slot>Modal description.</slot>
    </div>
  </div>
</div>

<script type="module">
  /* -------------------------------------------------------------
  | variables
  | -------------------------------------------------------------
  */
  const body = document.querySelector('body')
  const modal = document.querySelector('.modal')
  const modalInner = modal.querySelector('.modal__inner')
  const triggerId = modal.getAttribute('aria-labelledby')
  const modalCloseButton = modal.querySelector('.modal__close button')
  const modalTrigger = document.querySelector(`#${triggerId}`)
  const images = modal.querySelectorAll('img')
  const iframes = modal.querySelectorAll('iframe')
  const shouldAutoplay = modal.hasAttribute('data-autoplay-vimeo-player')
  // let isPaused = false

  /* -------------------------------------------------------------
  | functions
  | -------------------------------------------------------------
  */
  const teleportToRoot = (element) => {
    element.remove()
    body.appendChild(element)
  }

  const getKeyboardFocusableElements = (element) => {
    return [
      ...element.querySelectorAll(
        'a, button, input, textarea, select, details,[tabindex]:not([tabindex="-1"])'
      ),
    ].filter((el) => !el.hasAttribute('disabled'))
  }

  const trapFocus = (event) => {
    const focusables = getKeyboardFocusableElements(modal)
    const firstFocusable = focusables[0]
    const lastFocusable = focusables[focusables.length - 1]

    if (
      document.activeElement === lastFocusable &&
      event.key === 'Tab' &&
      !event.shiftKey
    ) {
      event.preventDefault()
      firstFocusable.focus()
    }

    if (
      document.activeElement === firstFocusable &&
      event.key === 'Tab' &&
      event.shiftKey
    ) {
      event.preventDefault()
      lastFocusable.focus()
    }
  }

  const closeOnEsc = (event) => {
    if (event.key === 'Escape') {
      closeModal()
    }
  }

  const openModal = (event) => {
    event && event.preventDefault()

    // Make body stop scrolling
    body.style.overflow = 'hidden'

    // Load all still images (previously set to lazy)
    images && images.forEach((image) => image.setAttribute('loading', 'eager'))

    const modalCloseButton = modal.querySelector('.modal__close__button')

    modal.classList.add('show')
    modal.setAttribute('aria-hidden', false)
    body.classList.add('modal-is-active')
    modalCloseButton.focus()

    // Set up keyboard functions
    document.addEventListener('keydown', trapFocus)
    document.addEventListener('keydown', closeOnEsc)

    // Autoplay Vimeo video if indicated by prop
    if (shouldAutoplay) {
      const vimeoPlayerIframe = modal.querySelector('iframe')
      const player = new window.Vimeo.Player(vimeoPlayerIframe)
      player.play()
    }
  }

  const closeModal = () => {
    // reset to lazy in case some didn't load before user closed modal
    images && images.forEach((image) => image.setAttribute('loading', 'lazy'))

    pauseIframeVideos()

    modalInner.classList.add('closing')

    setTimeout(() => {
      modalInner.scrollTop = 0
      modalInner.classList.remove('closing')
      modal.classList.remove('show')
      modal.setAttribute('aria-hidden', true)
      body.classList.remove('modal-is-active')
      modalTrigger.focus({ preventScroll: true })
      body.style.overflow = 'visible'

      document.removeEventListener('keydown', trapFocus)
      document.removeEventListener('keydown', closeOnEsc)
    }, 500)
  }

  const pauseIframeVideos = () => {
    iframes &&
      iframes.forEach((iframe) => {
        if (
          iframe.contentWindow &&
          iframe.src.startsWith('https://player.vimeo.com/')
        ) {
          iframe.contentWindow.postMessage('{ "method": "pause" }', '*')
        }
      })
  }

  /* -------------------------------------------------------------
  | execution
  | -------------------------------------------------------------
  */
  teleportToRoot(modal)

  modalTrigger.addEventListener('click', openModal)

  modalCloseButton.addEventListener('click', closeModal)

  modal.addEventListener('click', (event) => {
    if (!event.target.closest('.modal__content')) {
      closeModal()
    }
  })

  window.closeModal = closeModal
</script>

<style lang="scss">
  .modal {
    height: 0;
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    visibility: hidden;
    z-index: -10;

    &.show {
      display: grid;
      place-items: center;
      visibility: visible;
      height: auto;
      inset: 0;
      z-index: 10;

      .modal__inner {
        opacity: 1;

        &.closing {
          opacity: 0;
        }
      }
    }
  }

  .modal__inner {
    width: 100%;
    height: 100%;
    position: relative;
    background-color: var(--color-modal-bg);
    opacity: 0;
    transition:
      opacity 0.5s ease-in-out,
      transform 0.5s ease-out;
    overflow-y: scroll;
    padding: var(--margin-body-top) 0 6rem;
  }

  .modal__content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
    margin: 0 auto;
  }

  .modal__close {
    position: fixed;
    top: 0rem;
    right: 0rem;
    z-index: 100;

    button {
      padding: var(--margin-body-top);
      border: none;
      background-color: transparent;
      opacity: 0.5;
      transition: opacity 0.25s ease-in-out;
      cursor: pointer;

      &:hover,
      &:focus {
        opacity: 0.75;
      }

      &:focus {
        outline: none; // this is bad
      }

      img {
        width: 2.25rem;
      }
    }
  }
</style>
