---
import { loadQuery } from '../sanity/lib/loadQuery'
import { getAverageColor } from 'fast-average-color-node'
import BaseModal from './BaseModal.astro'
import VimeoPlayer from './VimeoPlayer.svelte'
import { IMG_GLOBAL_URL_PARAMS } from '../config'

const { data: reel } = await loadQuery({
  query: `*[_type=="reel"][0] { 
    ...,
    placeholderStills[] {
      "width": asset->metadata.dimensions.width,
      "height": asset->metadata.dimensions.height,
      "aspect": asset->metadata.dimensions.aspectRatio,
      "url": asset->url,
    } 
  }`,
  params: {},
})

const reelModalTriggerId = 'reel-slideshow'

const thumbUrls = reel.placeholderStills.map((still) => still.url + '?w=256')

const getAverageRGBColor = async (imgUrl) => {
  // return as string `r, g, b` so alpha can easily be added
  const color = await getAverageColor(imgUrl)
  return `${color.value[0]}, ${color.value[1]}, ${color.value[2]}`
}

const slideAvgColorsRGB = await Promise.all(
  thumbUrls.map((url) => getAverageRGBColor(url))
)

const backdropAlpha = 0.75
---

<>
  <div class="backdrop">
    {
      reel.placeholderStills.map((still, i) => (
        <div
          data-slideshow-backdrop
          style={`background-color: rgb(${slideAvgColorsRGB[i]}, ${backdropAlpha})`}
        />
      ))
    }

    <div class="vignette-effect"></div>
    <div data-slideshow-backdrop-mask></div>
  </div>

  <a
    class="slideshow"
    href={reel.vimeoUrl}
    data-slideshow
    id={reelModalTriggerId}
  >
    <div class="slide-container">
      {
        reel.placeholderStills.map((still) => (
          <img
            src={still.url + '?w=1796${IMG_GLOBAL_URL_PARAMS}'}
            srcset=`
              ${still.url}?w=400${IMG_GLOBAL_URL_PARAMS} 400w,
              ${still.url}?w=600${IMG_GLOBAL_URL_PARAMS} 600w,
              ${still.url}?w=800${IMG_GLOBAL_URL_PARAMS} 800w,
              ${still.url}?w=1000${IMG_GLOBAL_URL_PARAMS} 1000w,
              ${still.url}?w=1200${IMG_GLOBAL_URL_PARAMS} 1200w,
              ${still.url}?w=1400${IMG_GLOBAL_URL_PARAMS} 1400w,
              ${still.url}?w=1600${IMG_GLOBAL_URL_PARAMS} 1600w,
              ${still.url}?w=1800${IMG_GLOBAL_URL_PARAMS} 1800w,
              ${still.url}?w=2000${IMG_GLOBAL_URL_PARAMS} 2000w,
              ${still.url}?w=2200${IMG_GLOBAL_URL_PARAMS} 2200w,
              ${still.url}?w=2400${IMG_GLOBAL_URL_PARAMS} 2400w,
              ${still.url}?w=3200${IMG_GLOBAL_URL_PARAMS} 3200w,
              ${still.url}?w=3400${IMG_GLOBAL_URL_PARAMS} 3400w,
              ${still.url}?w=3600${IMG_GLOBAL_URL_PARAMS} 3600w,
            `
            sizes="(max-width: 1796px) 100vw, 3592px"
            alt=""
            class="slide"
            width="1796"
            height="1010"
            data-slide
          />
        ))
      }
    </div>

    <div class="play-button">
      <img
        src="/img/play.svg"
        alt="Play Andrew Aiello's reel"
        class="play-button-icon"
      />
    </div>
  </a>

  <BaseModal
    triggerId={reelModalTriggerId}
    autoplayVimeoPlayer
  >
    <div
      style="
        display: grid;
        justify-items: center;
        grid-template-columns: 1fr;
        position: fixed;
        width: 100%;
        top: 0;
        left: 50%;
        transform: translate(-50%);
        right: 0;
        bottom: 0;
      "
    >
      <div
        style="
        display: grid; /* centers player vertically */
        width: 100%;
        max-width: min(16 / 9 * 100vh - 4vh, var(--max-element-width));
      "
      >
        <VimeoPlayer
          url={reel.vimeoUrl}
          title="Andrew Aiello Reel"
          autoplay={false}
        />
      </div>
    </div>
  </BaseModal>
</>

<script>
  // @ts-nocheck // prevent VS Code from showing TypeScript 'problems' since this is just JavaScript

  const slideshow = () => {
    let slideCounter = 0
    const interval = 3000

    const slides = document.querySelectorAll('[data-slide]')
    const backdrops = document.querySelectorAll('[data-slideshow-backdrop]')

    const advanceSlideshow = () => {
      const slideIndex = slideCounter % slides.length
      const thisSlide = slides[slideIndex]
      const thisBackdrop = backdrops[slideIndex]

      // Transition in
      thisSlide.style.opacity = 1
      thisBackdrop.style.opacity = 1

      // Transition out
      setTimeout(() => {
        thisSlide.style.opacity = 0
        thisBackdrop.style.opacity = 0
      }, interval)

      slideCounter++
    }

    advanceSlideshow()
    setInterval(() => advanceSlideshow(), interval)
  }

  const dynamicBackdropMask = () => {
    const minMaskOpacity = 0
    const maxMaskOpacity = 0.725
    const initialView = document.querySelector('[data-initial-view]')
    const initialViewHeight = initialView.offsetHeight
    const backdropMask = document.querySelector(
      '[data-slideshow-backdrop-mask]'
    )

    function throttle(func, wait = 25) {
      let waiting = false

      return function () {
        if (waiting) {
          return
        }

        waiting = true
        setTimeout(() => {
          func.apply(this, arguments)
          waiting = false
        }, wait)
      }
    }

    const updateBackdropMaskOpacity = throttle(() => {
      const scrollDist = document.documentElement.scrollTop

      if (scrollDist >= initialViewHeight && backdropMask.style.opacity === 1) {
        return
      } else {
        const opacity = 1 - (initialViewHeight - scrollDist) / initialViewHeight
        backdropMask.style.opacity = Math.min(
          Math.max(opacity, minMaskOpacity),
          maxMaskOpacity
        )
      }
    })

    updateBackdropMaskOpacity() // update opacity on load
    window.addEventListener('scroll', updateBackdropMaskOpacity, {
      passive: true,
    })
  }

  slideshow() // start slideshow
  dynamicBackdropMask() // set up backdrop mask
</script>

<style lang="scss">
  [tabindex='-1'] {
    outline: none;
  }

  .slideshow {
    position: relative;
    margin: 0;
    width: 100vw;
    min-width: 100%;
    max-width: min(120vh, var(--max-element-width));
    aspect-ratio: 1796 / 1005; /** 
                                * Intentionally shorter than 1010 intrinsic
                                * image height to work around Safari height miscalculation:
                                */
    align-self: center;
  }

  .slide-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -5;
  }

  [data-slideshow-backdrop],
  .vignette-effect,
  [data-slideshow-backdrop-mask] {
    position: fixed;
    z-index: -2;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    will-change: opacity; // improves performance?
  }

  .vignette-effect {
    opacity: 1;
    box-shadow: inset 0 0 50vw var(--color-bg);
  }

  [data-slideshow-backdrop] {
    transition: opacity 1.5s ease-out;
  }

  [data-slideshow-backdrop-mask] {
    background-color: black;
    opacity: 0;
    transition: opacity 0.5s linear;
  }

  .slide {
    position: absolute;
    z-index: 2;
    display: block;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    opacity: 0;
    transition: opacity 1.5s ease-out;
  }

  .slideshow:hover {
    cursor: pointer;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 3;
    opacity: 0.75;
    background-color: rgb(0 0 0 / 20%);
    display: flex;
    padding: 0.825em;
    border-radius: 999px;
    transition:
      opacity 0.25s ease-out,
      background-color 0.25s ease-out;

    .slideshow:hover & {
      background-color: rgb(0 0 0 / 60%);
      opacity: 1;
    }
  }

  .play-button-icon {
    width: 1.25em;
    height: 1.25em;
  }
</style>
