---
import { loadQuery } from '../sanity/lib/loadQuery'
import Project from './Project.svelte'
import { marked } from 'marked'
// import getDimsFromImageUrls from '../scripts/getDimsFromImageUrls.js'

const { projectSets } = Astro.props

const { data: projectsUngrouped } = await loadQuery({
  query: `*[_type=="project"] | order(orderRank asc) {
    clips,
    title,
    projectType,
    orderRank,
    director,
    "projectSetId": projectSet._ref,
    "colorAccentRgb": 
      "rgb("
        + string(colorAccent.rgb.r)
        + " " + string(colorAccent.rgb.g)
        + " " + string(colorAccent.rgb.b)
        + " / " + string(colorAccent.rgb.a)
        + 
      ")",
    "featuredStill": {
      "width": featuredStill.asset->metadata.dimensions.width,
      "height": featuredStill.asset->metadata.dimensions.height,
      "aspect": featuredStill.asset->metadata.dimensions.aspectRatio,
      "url": featuredStill.asset->url,
    },
    "stills": stills[] {
      "width": asset->metadata.dimensions.width,
      "height": asset->metadata.dimensions.height,
      "aspect": asset->metadata.dimensions.aspectRatio,
      "url": asset->url,
    },
  }`,
})

// Set max width for stills, to be used to calculate max heights
const maxStillWidth = 1920

const getTransformedProject = (project) => {
  // Change hypens to em dashes, then process with Markdown to smarten punctuation
  const markdownTitle = marked.parseInline(
    project.title.replace(/ - /g, ` â€” `),
    { smartypants: true }
  )

  return {
    ...project,
    tite: markdownTitle,
    featuredStill: {
      ...project.featuredStill,
      maxWidth: maxStillWidth,
      maxHeight: Math.round(maxStillWidth / project.featuredStill.aspect),
    },
    stills: project.stills.map((still) => {
      return {
        ...still,
        maxWidth: maxStillWidth,
        maxHeight: Math.round(maxStillWidth / still.aspect),
      }
    }),
  }
}
---

{
  projectSets.map((projectSet, i) => (
    <section
      class="section"
      id={i === 0 ? 'first-section' : ''}
    >
      <h3>{projectSet.heading}</h3>

      {projectsUngrouped
        .filter((project) => project.projectSetId === projectSet._id)
        .map((project) => (
          <Project
            project={getTransformedProject(project)}
            projectTypeLabel={
              project.projectType || projectSet.fallbackProjectTypeLabel
            }
            client:load
          />
        ))}
    </section>
  ))
}
